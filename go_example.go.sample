// package main

// import (
// 	"fmt"
// 	"log"
// 	"net/http"
// 	"os"
// 	"time"

// 	"github.com/gorilla/mux"
// 	"github.com/joho/godotenv"
// 	// "crypto/sha256"
// 	// "encoding/hex"
// 	// "encoding/json"
// 	// "io"
// 	// "log"
// 	// "net/http"
// 	// "os"
// 	// "time"
// 	// "github.com/davecgh/go-spew/spew"
// 	// "github.com/joho/godotenv"
// )

// func makeMuxRouter() http.Handler {
// 	muxRouter := mux.NewRouter()
// 	// muxRouter.HandleFunc("/", handleGetBlockchain).Methods("GET")
// 	// muxRouter.HandleFunc("/", handleWriteBlock).Methods("POST")
// 	return muxRouter
// }

// func run() error {
// 	mux := makeMuxRouter()
// 	httpAddr := os.Getenv("ADDR")
// 	log.Println("Listening on ", os.Getenv("ADDR"))
// 	s := &http.Server{
// 		Addr:           ":" + httpAddr,
// 		Handler:        mux,
// 		ReadTimeout:    10 * time.Second,
// 		WriteTimeout:   10 * time.Second,
// 		MaxHeaderBytes: 1 << 20,
// 	}

// 	if err := s.ListenAndServe(); err != nil {
// 		return err
// 	}

// 	return nil
// }

// func main() {
// 	err := godotenv.Load()
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	go func() {
// 		t := time.Now()
// 		fmt.Println(t.String())
// 		// genesisBlock := Block{0, t.String(), 0, "", ""}
// 		// spew.Dump(genesisBlock)
// 		// Blockchain = append(Blockchain, genesisBlock)
// 	}()
// 	log.Fatal(run())

// }
